trigger:
  branches:
    include:
    - master

pr: none

pool:
  vmImage: ubuntu-latest

# Versioning source: https://stackoverflow.com/a/60609868/987827
variables:
  buildConfiguration: 'Release'
  major: '1'
  minor: '0'
  revision: $[counter(variables['minor'], 1)] # This will get reset every time minor gets bumped.
  nugetVersion: '$(major).$(minor).$(revision)'

stages:
- stage: build
  jobs:
    - job: build
      steps:
      - script: echo 'Pipeline:\sSparkRoseDigital.Template version $(nugetVersion) \n------------- Build.ArtifactStagingDirectory:\s$(Build.ArtifactStagingDirectory)'

      - script: dotnet build ./source/SparkRoseDigital_Template.sln --configuration Release
        displayName: 'dotnet build $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: 'test'
          projects: '**/*.csproj'
          publishTestResults: true
          configuration: $(buildConfiguration)

      # - script: nuget.exe pack
      #   displayName: 'nuget pack'
      # - task: NuGetCommand@2
      #   displayName: 'nuget pack'
      #   inputs:
      #     command: 'pack'
      #     packagesToPack: './SparkRoseDigital.Template.nuspec'
      #     configuration: '$(buildConfiguration)'
      #     # packDestination: 'drop'
      #     versioningScheme: 'byEnvVar'
      #     versionEnvVar: 'nugetVersion'
      - task: NuGetCommand@2
        displayName: 'nuget pack'
        inputs:
          command: 'custom'
          arguments: 'pack ./SparkRoseDigital.Template.nuspec -NonInteractive -OutputDirectory $(Build.ArtifactStagingDirectory) -Properties Configuration=Release -version $(nugetVersion) -Verbosity Detailed -NoDefaultExcludes'

      # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifacts'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'drop'
          publishLocation: pipeline

# build must be approved before getting pushed to nuget
- stage: wait_for_approval
  pool: server
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
    - job: waitForApproval
      displayName: 'wait for approval'
      # timeoutInMinutes: 1440    # 3 days before the build is rejected
      steps:
      - task: ManualValidation@0
        # timeoutInMinutes: 1440    # 3 days before the task is rejected.
        inputs:
          notifyUsers: $(notify_user_for_approval_1)
          instructions: 'Please validate the build before pushing to nuget.org'
          onTimeout: reject

- stage: deploy_to_nuget
  condition: ne(variables['Build.Reason'], 'PullRequest')
  jobs:
    - job: deployToNuget
      displayName: "deploy to nuget.org"
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          downloadPath: '$(Pipeline.Workspace)/drop'
      
      - script: dotnet nuget push $(Pipeline.Workspace)/drop/SparkRoseDigital.Template.$(nugetVersion).nupkg --api-key $(nuget_api_key) --source https://api.nuget.org/v3/index.json
        displayName: 'dotnet nuget push'

##########################################################


# Source: https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive#publish-artifacts-to-azure-pipelines
# - task: DotNetCoreCLI@2
#   displayName: 'dotnet publish'
#   inputs:
#     command: 'publish'
#     publishWebProjects: false
#     projects: '**/*.csproj'
#     configuration: $(buildConfiguration)
#     zipAfterPublish: false

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
# - task: PublishPipelineArtifact@1
#   displayName: 'Publish artifacts'
#   inputs:
#     targetPath: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'drop'

# - task: NuGetAuthenticate@1
#   inputs:
#     nuGetServiceConnections: 'nuget-srd-infra'

# - task: NuGetCommand@2
#   inputs:
#     command: push
#     nuGetFeedType: external
#     publishFeedCredentials: 'nuget-srd-infra'
#     versioningScheme: byEnvVar
#     versionEnvVar: nugetVersion
